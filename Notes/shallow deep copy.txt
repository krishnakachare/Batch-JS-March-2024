1.Primitive datatypes in Javascript like String, Number, Boolean, Undefined etc are passed by value, whereas structured datatypes like Objects and Arrays are passed by reference.
2.Primitive data types are immutable, whereas structured data types are mutable.
3.A shallow copy creates a new object, but the object still points to the original object in memory.
4.Assigning objects using the  = operator creates a shallow copy, which means that when either object is modified, the other object also reflects the change.
5.To create a shallow copy, we can use the following methods: Spread syntax(â€¦), Object.assign(), Array.from(),Object.create(),Array.prototype.concat().
6.A deep copy on the other hand, creates a new object which points to a new address in memory. This means that when either object is modified, the other object does not change.
7.For objects that contain only primitive values, a shallow copy is used and for nested objects a deep copy is required.
8.Deep copy can be done by using: JSON.parse(JSON.stringify()), structuredClone() or using third party libraries like Lodash.
9.Shallow copies are generally faster and more memory-efficient. However, making a shallow copy of an object won't clone child objects. Therefore, the copy is not fully independent of the original.
 10.Deep copy allows data independence and modifiability, however it is much slower and more expensive than a shallow copy.